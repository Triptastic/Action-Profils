local TMW                                     = TMW 
local Env                                     = TMW.CNDT.Env
local Action                                = Action
local Create                                = Action.Create
local Print                                    = Action.Print
local TimerSet                                = Action.TimerSet
local Listener                                = Action.Listener
local IsEnemy                                = Action.Bit.isEnemy
local toStr                                 = Action.toStr
local GetCL                                 = Action.GetCL
local GetToggle                             = Action.GetToggle
local TeamCache                                = Action.TeamCache
local TeamCacheFriendly                        = TeamCache.Friendly
local TeamCacheFriendlyIndexToPLAYERs        = TeamCacheFriendly.IndexToPLAYERs
local EnemyTeam                                = Action.EnemyTeam
local FriendlyTeam                            = Action.FriendlyTeam
local LoC                                     = Action.LossOfControl
local Player                                = Action.Player 
local MultiUnits                            = Action.MultiUnits
local ActiveUnitPlates                        = MultiUnits:GetActiveUnitPlates()
local UnitCooldown                            = Action.UnitCooldown
local Unit                                    = Action.Unit 
local Pet                                     = LibStub("PetLibrary")
local Azerite                                = LibStub("AzeriteTraits")
local GetGCD                                = Action.GetGCD
local GetCurrentGCD                            = Action.GetCurrentGCD
local GetPing                                = Action.GetPing
local IsUnitEnemy                            = Action.IsUnitEnemy
local IsUnitFriendly                        = Action.IsUnitFriendly
local AuraIsValid                            = Action.AuraIsValid
local InterruptIsValid                        = Action.InterruptIsValid
local BossMods_Pulling                        = Action.BossMods_Pulling
local BurstIsON                                = Action.BurstIsON

local _G, setmetatable, ipairs, pairs, next, select, math    = 
_G, setmetatable, ipairs, pairs, next, select, math

local UnitIsUnit                            = _G.UnitIsUnit

Action[ACTION_CONST_WARRIOR_ARMS] = {
    -- Racial
    ArcaneTorrent                            = Create({ Type = "Spell", ID = 50613}),
    BloodFury                                = Create({ Type = "Spell", ID = 20572}),
    Fireblood                                = Create({ Type = "Spell", ID = 265221}),
    AncestralCall                            = Create({ Type = "Spell", ID = 274738}),
    Berserking                                = Create({ Type = "Spell", ID = 26297}),
    ArcanePulse                                = Create({ Type = "Spell", ID = 260364}),
    QuakingPalm                                = Create({ Type = "Spell", ID = 107079}),
    Haymaker                                = Create({ Type = "Spell", ID = 287712}), 
    WarStomp                                = Create({ Type = "Spell", ID = 20549}),
    BullRush                                = Create({ Type = "Spell", ID = 255654}),    
    GiftofNaaru                                = Create({ Type = "Spell", ID = 59544}),
    Shadowmeld                                = Create({ Type = "Spell", ID = 58984}), -- usable in Action Core 
    Stoneform                                = Create({ Type = "Spell", ID = 20594}), 
    WilloftheForsaken                        = Create({ Type = "Spell", ID = 7744}), -- not usable in APL but user can Queue it    
    EscapeArtist                            = Create({ Type = "Spell", ID = 20589}), -- not usable in APL but user can Queue it
    EveryManforHimself                        = Create({ Type = "Spell", ID = 59752}), -- not usable in APL but user can Queue it
    LightsJudgment                            = Create({ Type = "Spell", ID = 255647}),
    BagofTricks                                = Create({ Type = "Spell", ID = 312411}),
    -- CrownControl    
    AntiFakeCC                                = Create({ Type = "SpellSingleColor", ID = 107570, Color = "GREEN", Desc = "[1] CC", QueueForbidden = true, BlockForbidden = true}), -- Stormbolt
    Pummel                                    = Create({ Type = "Spell", ID = 6552}),
    PummelGreen                                = Create({ Type = "SpellSingleColor", ID = 6552, Color = "GREEN", Desc = "[2] Kick", QueueForbidden = true     }),
    Hamstring                                = Create({ Type = "Spell", ID = 1715}),
    IntimidatingShout                        = Create({ Type = "Spell", ID = 5246}),
    -- Suppotive    
    RallyingCry                                = Create({ Type = "Spell", ID = 97462}),
    Taunt                                    = Create({ Type = "Spell", ID = 355, Desc = "[6] PvP Pets Taunt", QueueForbidden = true}),
    BattleShout                                = Create({ Type = "Spell", ID = 6673}),
    -- Self Defensives
    BerserkerRage                            = Create({ Type = "Spell", ID = 18499}),
    DiebytheSword                            = Create({ Type = "Spell", ID = 118038}),
    VictoryRush                                = Create({ Type = "Spell", ID = 34428}),
    -- Rotation
    Overpower                                = Create({ Type = "Spell", ID = 7384}),
    MortalStrike                            = Create({ Type = "Spell", ID = 12294}),
    ColossusSmash                            = Create({ Type = "Spell", ID = 167105}),
    Slam                                    = Create({ Type = "Spell", ID = 1464}),
    Bladestorm                                = Create({ Type = "Spell", ID = 227847}),
    Execute                                    = Create({ Type = "Spell", ID = 5308}),
    Whirlwind                                = Create({ Type = "Spell", ID = 1680}),
    SweepingStrikes                            = Create({ Type = "Spell", ID = 260708}),
    -- Movememnt    
    Charge                                    = Create({ Type = "Spell", ID = 100}),
    -- Buffs
    VictoriousBuff                            = Create({ Type = "Spell", ID = 32216, Hidden = true}),
    SweepingStrikesBuff                        = Create({ Type = "Spell", ID = 260708, Hidden = true}),
    TestofMightBuff                            = Create({ Type = "Spell", ID = 275540, Hidden = true}),
    SuddenDeathBuff                            = Create({ Type = "Spell", ID = 52437, Hidden = true}),
    DeadlyCalmBuff                            = Create({ Type = "Spell", ID = 262228, Hidden = true}),
    CrushingAssaultBuff                        = Create({ Type = "Spell", ID = 278826, Hidden = true}),
    ExecutionersPrecisionBuff                = Create({ Type = "Spell", ID = 272866, Hidden = true}),
    StoneHeartBuff                            = Create({ Type = "Spell", ID = 225947, Hidden = true}),
    RecklessForceBuff                        = Create({ Type = "Spell", ID = 302932 , Hidden = true}), 
    -- Debuffs
    ColossusSmashDebuff                        = Create({ Type = "Spell", ID = 208086, Hidden = true}),
    DeepWoundsDebuff                        = Create({ Type = "Spell", ID = 262115, Hidden = true}),
    BloodoftheEnemyDebuff                    = Create({ Type = "Spell", ID = 297108 , Hidden = true}),
    ConcentratedFlameDebuff                    = Create({ Type = "Spell", ID = 295368, Hidden = true}),
    RazorCoralDebuff                        = Create({ Type = "Spell", ID = 303568, Hidden = true}),
    ConductiveInkDebuff                        = Create({ Type = "Spell", ID = 302565, Hidden = true}),
    -- Talents
    WarMachine                                = Create({ Type = "Spell", ID = 262231, isTalent = true}),    -- Talent 1/1
    SuddenDeath                                = Create({ Type = "Spell", ID = 29725, isTalent = true}),    -- Talent 1/2
    Skullsplitter                            = Create({ Type = "Spell", ID = 260643, isTalent = true}),    -- Talent 1/3
    DoubleTime                                = Create({ Type = "Spell", ID = 103827, isTalent = true}),    -- Talent 2/1
    ImpendingVictory                        = Create({ Type = "Spell", ID = 202168, isTalent = true}),    -- Talent 2/2
    StormBolt                                = Create({ Type = "Spell", ID = 107570, isTalent = true}),    -- Talent 2/3
    Massacre                                = Create({ Type = "Spell", ID = 281001, isTalent = true}),    -- Talent 3/1
    FervorofBattle                            = Create({ Type = "Spell", ID = 202316, isTalent = true}),    -- Talent 3/2
    Rend                                    = Create({ Type = "Spell", ID = 772, isTalent = true}),        -- Talent 3/3
    SecondWind                                = Create({ Type = "Spell", ID = 29838, isTalent = true}),    -- Talent 4/1
    BoundingStride                            = Create({ Type = "Spell", ID = 202163, isTalent = true}),    -- Talent 4/2
    DefensiveStance                            = Create({ Type = "Spell", ID = 197690, isTalent = true}),    -- Talent 4/3
    BattleStance                            = Create({ Type = "Spell", ID = 212520, isTalent = true}),    -- Talent 4/3
    CollateralDamage                        = Create({ Type = "Spell", ID = 268243, isTalent = true}),    -- Talent 5/1
    Warbreaker                                = Create({ Type = "Spell", ID = 262161, isTalent = true}),    -- Talent 5/2
    Cleave                                    = Create({ Type = "Spell", ID = 845, isTalent = true}),        -- Talent 5/3
    InForTheKill                            = Create({ Type = "Spell", ID = 248621, isTalent = true}),    -- Talent 6/1
    Avatar                                    = Create({ Type = "Spell", ID = 107574, isTalent = true}),    -- Talent 6/2
    DeadlyCalm                                = Create({ Type = "Spell", ID = 262228, isTalent = true}),    -- Talent 6/3
    AngerManagement                            = Create({ Type = "Spell", ID = 152278, isTalent = true}),    -- Talent 7/1
    Dreadnaught                                = Create({ Type = "Spell", ID = 262150, isTalent = true}),    -- Talent 7/2
    Ravager                                    = Create({ Type = "Spell", ID = 152277, isTalent = true}),    -- Talent 7/3
    -- PvP Talents
    SharpenBlade                            = Create({ Type = "Spell", ID = 198817, isTalent = true}),    -- PvP Talent
    Disarm                                    = Create({ Type = "Spell", ID = 236077, isTalent = true}),    -- PvP Talent
    WarBanner                                = Create({ Type = "Spell", ID = 236320, isTalent = true}),    -- PvP Talent
    Duel                                    = Create({ Type = "Spell", ID = 236273, isTalent = true}),    -- PvP Talent
    SpellReflection                            = Create({ Type = "SpellSingleColor", ID = 216890, isTalent = true, Color = "YELLOW"}),    -- PvP Talent
    -- Items
    PotionofUnbridledFury                    = Create({ Type = "Potion",  ID = 169299 }), 
    DribblingInkpod                            = Create({ Type = "Trinket", ID = 169319 }),
    PocketsizedComputationDevice            = Create({ Type = "Trinket", ID = 167555 }),
    AshvanesRazorCoral                        = Create({ Type = "Trinket", ID = 169311 }),   
    -- Hidden 
    SeismicWave                                = Create({ Type = "Spell", ID = 277639, Hidden = true}), -- Simcraft Azerite
    TestofMight                                = Create({ Type = "Spell", ID = 275529, Hidden = true}), -- Simcraft Azerite
    -- Utillity
    CreepingMadnessDebuff                    = Create({ Type = "Spell", ID = 297108 , Hidden = true}), -- Wrathion Debuff Creeping Madness
}

Action:CreateEssencesFor(ACTION_CONST_WARRIOR_ARMS)
local A = setmetatable(Action[ACTION_CONST_WARRIOR_ARMS], { __index = Action })


local player                                    = "player"
local target                                    = "target"
local Temp                                        = {
    AttackTypes                                 = {"TotalImun", "DamagePhysImun"},
    AuraForInterrupt                             = {"TotalImun", "DamagePhysImun", "KickImun"},
    AuraForFear                                    = {"TotalImun", "DamagePhysImun", "FearImun"},
    AuraForStun                                    = {"TotalImun", "DamagePhysImun", "CCTotalImun", "StunImun"},
    AuraForSlow                                    = {"TotalImun", "DamagePhysImun", "CCTotalImun", "Freedom"},
    AuraForDisarm                                = {"TotalImun", "DamagePhysImun", "CCTotalImun"},
    BerserkerRageLoC                            = {"FEAR", "INCAPACITATE"},
    IsSlotTrinketBlocked                        = {
        [A.AshvanesRazorCoral.ID]                = true,
        [A.PocketsizedComputationDevice.ID]        = true,
        [A.DribblingInkpod.ID]                    = true, 
    },
}
-- [1] CC AntiFake Rotation
A[1] = function(icon)    
    local unitID
    if IsUnitEnemy("target") then 
        unitID = "target"
    end 
    
    if unitID and A.AntiFakeCC:IsReadyByPassCastGCD(unitID) and A.AntiFakeCC:AbsentImun(unitID, Temp.AuraForStun) and Unit(unitID):IsControlAble("stun") then 
        return A.AntiFakeCC:Show(icon)                    
    end 
end 

-- [2] Kick AntiFake Rotation
A[2] = function(icon)        
    local unitID
    if IsUnitEnemy("mouseover") then 
        unitID = "mouseover"
    elseif IsUnitEnemy("target") then 
        unitID = "target"
    end 
    
    if unitID then         
        local castLeft, _, _, _, notKickAble = Unit(unitID):IsCastingRemains()
        if castLeft > 0 then             
            if not notKickAble and A.PummelGreen:IsReadyByPassCastGCD(unitID, nil, nil, true) and A.PummelGreen:AbsentImun(unitID, Temp.AuraForInterrupt) then
                return A.PummelGreen:Show(icon)                                                  
            end 
            
            -- Racials 
            if A.QuakingPalm:IsRacialReadyP(unitID, nil, nil, true) then 
                return A.QuakingPalm:Show(icon)
            end 
            
            if A.Haymaker:IsRacialReadyP(unitID, nil, nil, true) then 
                return A.Haymaker:Show(icon)
            end 
            
            if A.WarStomp:IsRacialReadyP(unitID, nil, nil, true) then 
                return A.WarStomp:Show(icon)
            end 
            
            if A.BullRush:IsRacialReadyP(unitID, nil, nil, true) then 
                return A.BullRush:Show(icon)
            end                         
        end 
    end                                                                                 
end

local function InMelee(unitID)
    -- @return boolean 
    return A.MortalStrike:IsInRange(unitID)
end 

local function GetByRange(count, range, isCheckEqual, isCheckCombat)
    -- @return boolean 
    local c = 0 
    for unitID in pairs(ActiveUnitPlates) do 
        if (not isCheckEqual or not UnitIsUnit(target, unitID)) and (not isCheckCombat or Unit(unitID):CombatTime() > 0) and not Unit(unitID):IsExplosives() and not Unit(unitID):IsTotem() and select(6, Unit(unitID):InfoGUID()) ~= 161895 then 
            if InMelee(unitID) then 
                c = c + 1
            elseif range then 
                local r = Unit(unitID):GetRange()
                if r > 0 and r <= range then 
                    c = c + 1
                end 
            end 
            
            if c >= count then 
                return true 
            end 
        end 
    end
end 

local function GetByRangeTTD(self, count, range)
    -- @return number
    local total, total_ttd = 0, 0
    
    for unitID in pairs(ActiveUnitPlates) do 
        if not range or Unit(unitID):CanInterract(range) then 
            total = total + 1
            total_ttd = total_ttd + Unit(unitID):TimeToDie()
        end 
        
        if count and total >= count then 
            break 
        end 
    end 
    
    if total > 0 then 
        return total_ttd / total     
    else  
        return huge
    end
end 
GetByRangeTTD = A.MakeFunctionCachedDynamic(GetByRangeTTD)

-----------------------------------------
--                 ROTATION  
-----------------------------------------

-- [3] Single Rotation
A[3] = function(icon)
    local unitID                            = "player"
    local inAoE                                = GetToggle(2, "AoE")
    local inHoldAoE                            = GetToggle(2, "holdAoE")
    local minHoldAoE                        = GetToggle(2, "holdAoENum")
    local rampageLogic                        = GetToggle(2, "RampageLogic")
    local victoryRushHP                        = GetToggle(2, "VictoryRush")
    local AutoCharge                        = GetToggle(2, "AutoCharge")
    local AutoChargeRange                    = GetToggle(2, "AutoChargeRange")
    local combatTime                        = Unit(player):CombatTime()
    local inCombat                            = combatTime > 0
    local rage                                = Player:Rage()
    local canCleave                            = false
    
    if A.BattleShout:IsReady(player) and (Unit(player):HasBuffs(A.BattleShout.ID) == 0) then
        return A.BattleShout:Show(icon)
    end
    
    local function EnemyRotation(unitID)
        local isTargetInMelee            = InMelee(unitID)    
        -- BerserkerRage 
        -- Note: Loss of Control, IsReadyP!
        if LoC:IsValid(Temp.BerserkerRageLoC) and GetToggle(2, "UseBerserkerRage-LoC") and A.BerserkerRage:IsReadyP(player) then 
            return A.BerserkerRage:Show(icon)
        end
        
        -- [[ INTERRUPTS ]] 
        local useKick, useCC, useRacial = InterruptIsValid(unitID, "TargetMouseover")
        
        if useKick or useCC or useRacial then         
            local castLeft, _, _, _, notKickAble = Unit(unitID):IsCastingRemains()
            
            -- useKick
            if useKick and castLeft > 0 and not notKickAble and A.AbsentImun(nil, unitID, Temp.AuraForInterrupt) and Unit(unitID):CanInterrupt(nil, nil, 15, 67) and A.Pummel:IsReady(unitID) then 
                return A.Pummel:Show(icon)
            end
            
            -- useCC / useRacial
            if not useKick or notKickAble or A.Pummel:GetCooldown() > 0 then
                if useCC and castLeft > GetCurrentGCD() and castLeft < GetGCD() + GetCurrentGCD() + 0.2 and A.StormBolt:IsReady(unitID) and A.StormBolt:AbsentImun(unitID, Temp.AuraForStun) and Unit(unitID):IsControlAble("stun") then 
                    return A.StormBolt:Show(icon)
                end 
                
                if useCC and castLeft > GetCurrentGCD() and castLeft < GetGCD() + GetCurrentGCD() + 0.2 and A.IntimidatingShout:IsReady(unitID) and A.IntimidatingShout:AbsentImun(unitID, Temp.AuraForFear) and Unit(unitID):IsControlAble("fear") then 
                    return A.IntimidatingShout:Show(icon)       
                end 
            end
        end
        
        
        local isInExecute = A.Massacre:IsSpellLearned() and Unit(unitID):HealthPercent() < 35 or Unit(unitID):HealthPercent() < 20
        
        -- Check if target is explosive or totem for dont use AoE spells 
        if not Unit(unitID):IsExplosives() and not Unit(unitID):IsTotem() then
            canCleave = true
        end
        
        -- [[ BURST ]] 
        if isTargetInMelee and BurstIsON(unitID) and ((Unit(unitID):IsBoss() or Unit(unitID):IsPlayer()) and Unit(unitID):TimeToDie() >= GetToggle(2, "BurstTTDBoss") or not Unit(unitID):IsBoss() and not Unit(unitID):IsPlayer() and Unit(unitID):TimeToDie() >= GetToggle(2, "BurstTTDMobs")) and canCleave then
            -- BloodFury
            if A.BloodFury:AutoRacial(unitID) and (Unit(player):HasBuffs(A.MemoryofLucidDreams.ID) < 5 or (not Azerite:EssenceHasMajor(A.MemoryofLucidDreams.ID) and Unit(unitID):HasDeBuffs(A.ColossusSmashDebuff.ID, true) > 0)) then
                return A.BloodFury:Show(icon)
            end
            
            -- Berserking
            if A.Berserking:AutoRacial(unitID) and (Unit(player):HasBuffs(A.MemoryofLucidDreams.ID) < 5 or (not Azerite:EssenceHasMajor(A.MemoryofLucidDreams.ID) and Unit(unitID):HasDeBuffs(A.ColossusSmashDebuff.ID, true) > 0)) then
                return A.Berserking:Show(icon)
            end
            
            -- ArcaneTorrent
            if A.ArcaneTorrent:IsRacialReady(unitID) and (A.MortalStrike:GetCooldown() > 1.5 and Unit(player):HasBuffs(A.MemoryofLucidDreams.ID) == 0 and rage < 50) then
                return A.ArcaneTorrent:Show(icon)
            end
            
            -- LightsJudgment
            if A.LightsJudgment:AutoRacial(unitID) and (Unit(unitID):HasDeBuffs(A.ColossusSmashDebuff.ID, true) == 0 and Unit(player):HasBuffs(A.MemoryofLucidDreams.ID) == 0 and A.MortalStrike:GetCooldown() > 0) then
                return A.LightsJudgment:Show(icon)
            end
            
            -- Fireblood
            if A.Fireblood:AutoRacial(unitID) and (Unit(player):HasBuffs(A.MemoryofLucidDreams.ID) < 5 or (not Azerite:EssenceHasMajor(A.MemoryofLucidDreams.ID) and Unit(unitID):HasDeBuffs(A.ColossusSmashDebuff.ID, true) > 0)) then
                return A.Fireblood:Show(icon)
            end
            
            -- AncestralCall
            if A.AncestralCall:AutoRacial(unitID) and (Unit(player):HasBuffs(A.MemoryofLucidDreams.ID) < 5 or (not Azerite:EssenceHasMajor(A.MemoryofLucidDreams.ID) and Unit(unitID):HasDeBuffs(A.ColossusSmashDebuff.ID, true) > 0)) then
                return A.AncestralCall:Show(icon)
            end
            
            -- BagofTricks
            if A.BagofTricks:AutoRacial(unitID) and (Unit(unitID):HasDeBuffs(A.ColossusSmashDebuff.ID, true) == 0 and Unit(player):HasBuffs(A.MemoryofLucidDreams.ID) == 0 and A.MortalStrike:GetCooldown() > 0) then
                return A.BagofTricks:Show(icon)
            end
            
            -- SweepingStrikes
            if A.SweepingStrikes:IsReady(player) and (inAoE and GetByRange(2, 8) and (A.Bladestorm:GetCooldown() > 10 or A.ColossusSmash:GetCooldown() > 8 or A.TestofMight:GetAzeriteRank() >= 1)) then
                return A.SweepingStrikes:Show(icon)
            end
            
            -- MemoryofLucidDreams
            if A.MemoryofLucidDreams:AutoHeartOfAzerothP(unitID) and (not A.Warbreaker:IsSpellLearned() and A.ColossusSmash:GetCooldown() < GetGCD() + GetCurrentGCD() and (Unit(unitID):TimeToDie() > 150 or Unit(unitID):HealthPercent() < 20)) then
                return A.MemoryofLucidDreams:Show(icon)
            end
            
            -- MemoryofLucidDreams
            if A.MemoryofLucidDreams:AutoHeartOfAzerothP(unitID) and (A.Warbreaker:IsSpellLearned() and A.Warbreaker:GetCooldown() < GetGCD() + GetCurrentGCD() and (Unit(unitID):TimeToDie() > 150 or Unit(unitID):HealthPercent() < 20)) then
                return A.MemoryofLucidDreams:Show(icon)
            end
        end
        
        -- [[ EXECUTE ]] 
        if isInExecute then
            -- Skullsplitter
            if A.Skullsplitter:IsReady(unitID) and (rage < 60 and Unit(player):HasBuffs(A.DeadlyCalmBuff.ID) == 0 and Unit(player):HasBuffs(A.MemoryofLucidDreams.ID) == 0) and A.Skullsplitter:AbsentImun(unitID, Temp.AttackTypes) then
                return A.Skullsplitter:Show(icon)
            end
            
            -- [[ BURST ]] 
            if isTargetInMelee and BurstIsON(unitID) and ((Unit(unitID):IsBoss() or Unit(unitID):IsPlayer()) and Unit(unitID):TimeToDie() >= GetToggle(2, "BurstTTDBoss") or not Unit(unitID):IsBoss() and not Unit(unitID):IsPlayer() and Unit(unitID):TimeToDie() >= GetToggle(2, "BurstTTDMobs")) and canCleave then
                -- Ravager 
                if A.Ravager:IsReady(unitID, true) and (Unit(player):HasBuffs(A.DeadlyCalmBuff.ID) == 0 and (A.ColossusSmash:GetCooldown() < 2 or (A.Warbreaker:IsSpellLearned() and A.Warbreaker:GetCooldown() < 2))) and A.Ravager:AbsentImun(unitID, Temp.AttackTypes) then
                    return A.Ravager:Show(icon)
                end
                
                -- ColossusSmash
                if A.ColossusSmash:IsReady(unitID) and not A.Warbreaker:IsSpellLearned() and (not Azerite:EssenceHasMajor(A.MemoryofLucidDreams.ID) or (Unit(player):HasBuffs(A.MemoryofLucidDreams.ID) > 0 or A.MemoryofLucidDreams:GetCooldown() > 10)) and A.ColossusSmash:AbsentImun(unitID, Temp.AttackTypes) then
                    return A.ColossusSmash:Show(icon)
                end
                
                -- Warbreaker
                if A.Warbreaker:IsReady(unitID, true) and (not Azerite:EssenceHasMajor(A.MemoryofLucidDreams.ID) or (Unit(player):HasBuffs(A.MemoryofLucidDreams.ID) > 0 or A.MemoryofLucidDreams:GetCooldown() > 10)) and A.Warbreaker:AbsentImun(unitID, Temp.AttackTypes) then
                    return A.Warbreaker:Show(icon)
                end
                
                -- DeadlyCalm
                if A.DeadlyCalm:IsReady(player) then
                    return A.DeadlyCalm:Show(icon)
                end
                
                -- Bladestorm 
                if A.Bladestorm:IsReady(unitID, true) and (Unit(player):HasBuffs(A.MemoryofLucidDreams.ID) == 0 and Unit(player):HasBuffs(A.TestofMightBuff.ID) > 0 and rage < 30 and Unit(player):HasBuffs(A.DeadlyCalmBuff.ID) == 0) then
                    return A.Bladestorm:Show(icon)
                end
            end
            
            -- Cleave
            if A.Cleave:IsReady(unitID, true) and isTargetInMelee and inAoE and GetByRange(2, 8) and A.Cleave:AbsentImun(unitID, Temp.AttackTypes) then
                return A.Cleave:Show(icon)
            end
            
            -- Slam
            if A.Slam:IsReady(unitID) and (Unit(player):HasBuffs(A.CrushingAssaultBuff.ID) > 0 and Unit(player):HasBuffs(A.MemoryofLucidDreams.ID) == 0) and A.Slam:AbsentImun(unitID, Temp.AttackTypes) then
                return A.Slam:Show(icon)
            end
            
            -- MortalStrike
            if A.MortalStrike:IsReady(unitID) and (Unit(player):HasBuffsStacks(A.Overpower.ID) == 2 and A.Dreadnaught:IsSpellLearned() or Unit(player):HasBuffsStacks(A.ExecutionersPrecisionBuff.ID) == 2) and A.MortalStrike:AbsentImun(unitID, Temp.AttackTypes) then
                return A.MortalStrike:Show(icon)
            end
            
            -- Execute
            if A.Execute:IsReady(unitID) and (Unit(player):HasBuffs(A.MemoryofLucidDreams.ID) > 0 or Unit(player):HasBuffs(A.DeadlyCalmBuff.ID) > 0 or (Unit(player):HasBuffs(A.TestofMightBuff.ID) > 0 and A.MemoryofLucidDreams:GetCooldown() > 94)) and A.Execute:AbsentImun(unitID, Temp.AttackTypes) then
                return A.Execute:Show(icon)
            end
            
            -- Overpower
            if A.Overpower:IsReady(unitID) and A.Overpower:AbsentImun(unitID, Temp.AttackTypes) then
                return A.Overpower:Show(icon)
            end 
            
            -- Execute
            if A.Execute:IsReady(unitID) and A.Execute:AbsentImun(unitID, Temp.AttackTypes) then
                return A.Execute:Show(icon)
            end
        end
        
        -- [[ FIVE TARGET ]] 
        if inAoE and GetByRange(5, 8) then
            -- Skullsplitter
            if A.Skullsplitter:IsReady(unitID) and (rage < 60 and (not A.DeadlyCalm:IsSpellLearned() or Unit(player):HasBuffs(A.DeadlyCalmBuff.ID) == 0)) and A.Skullsplitter:AbsentImun(unitID, Temp.AttackTypes) then
                return A.Skullsplitter:Show(icon)
            end
            
            -- [[ BURST ]] 
            if isTargetInMelee and BurstIsON(unitID) and ((Unit(unitID):IsBoss() or Unit(unitID):IsPlayer()) and Unit(unitID):TimeToDie() >= GetToggle(2, "BurstTTDBoss") or not Unit(unitID):IsBoss() and not Unit(unitID):IsPlayer() and Unit(unitID):TimeToDie() >= GetToggle(2, "BurstTTDMobs")) and canCleave then
                -- Ravager 
                if A.Ravager:IsReady(unitID, true) and (A.ColossusSmash:GetCooldown() < 2 or (A.Warbreaker:IsSpellLearned() and A.Warbreaker:GetCooldown() < 2)) and A.Ravager:AbsentImun(unitID, Temp.AttackTypes) then
                    return A.Ravager:Show(icon)
                end
                
                -- ColossusSmash
                if A.ColossusSmash:IsReady(unitID) and not A.Warbreaker:IsSpellLearned() and A.ColossusSmash:AbsentImun(unitID, Temp.AttackTypes) then
                    return A.ColossusSmash:Show(icon)
                end
                
                -- Warbreaker
                if A.Warbreaker:IsReady(unitID, true) and A.Warbreaker:AbsentImun(unitID, Temp.AttackTypes) then
                    return A.Warbreaker:Show(icon)
                end
                
                -- Bladestorm
                if A.Bladestorm:IsReady(unitID, true) and (Unit(player):HasBuffs(A.SweepingStrikesBuff.ID) == 0 and (not A.DeadlyCalm:IsSpellLearned() or Unit(player):HasBuffs(A.DeadlyCalmBuff.ID) == 0) and ((Unit(unitID):HasDeBuffs(A.ColossusSmashDebuff.ID, true) > 4.5 and A.TestofMight:GetAzeriteRank() == 0) or Unit(player):HasBuffs(A.TestofMightBuff.ID) > 0)) then
                    return A.Bladestorm:Show(icon)
                end
                
                -- DeadlyCalm
                if A.DeadlyCalm:IsReady(player) then
                    return A.DeadlyCalm:Show(icon)
                end
            end
            
            -- Cleave
            if A.Cleave:IsReady(unitID, true) and isTargetInMelee and A.Cleave:AbsentImun(unitID, Temp.AttackTypes) then
                return A.Cleave:Show(icon)
            end
            
            --Execute
            if A.Execute:IsReady(unitID) and ((not A.Cleave:IsSpellLearned() and Unit(unitID):HasDeBuffs(A.DeepWoundsDebuff.ID, true) < 2) or Unit(player):HasBuffs(A.SuddenDeathBuff.ID) > 0) and (Unit(player):HasBuffs(A.SweepingStrikesBuff.ID) > 0 or A.SweepingStrikes:GetCooldown() > 8) and A.Execute:AbsentImun(unitID, Temp.AttackTypes) then
                return A.Execute:Show(icon)
            end
            
            -- MortalStrike
            if A.MortalStrike:IsReady(unitID) and ((not A.Cleave:IsSpellLearned() and Unit(unitID):HasDeBuffs(A.DeepWoundsDebuff.ID, true) < 2) or Unit(player):HasBuffs(A.SweepingStrikesBuff.ID) > 0 and Unit(player):HasBuffsStacks(A.Overpower.ID) == 2 and (A.Dreadnaught:IsSpellLearned() or Unit(player):HasBuffsStacks(A.ExecutionersPrecisionBuff.ID) == 2)) and A.MortalStrike:AbsentImun(unitID, Temp.AttackTypes) then
                return A.MortalStrike:Show(icon)
            end
            
            -- Whirlwind
            if A.Whirlwind:IsReady(unitID, true) and isTargetInMelee and (Unit(unitID):HasDeBuffs(A.ColossusSmashDebuff.ID, true) > 0 or (Unit(player):HasBuffs(A.CrushingAssaultBuff.ID) > 0 and A.FervorofBattle:IsSpellLearned())) and A.Whirlwind:AbsentImun(unitID, Temp.AttackTypes) then
                return A.Whirlwind:Show(icon)
            end
            
            -- Whirlwind
            if A.Whirlwind:IsReady(unitID, true) and isTargetInMelee and (Unit(player):HasBuffs(A.DeadlyCalmBuff.ID) > 0 or rage > 60) and A.Whirlwind:AbsentImun(unitID, Temp.AttackTypes) then
                return A.Whirlwind:Show(icon)
            end
            
            -- Overpower
            if A.Overpower:IsReady(unitID) and A.Overpower:AbsentImun(unitID, Temp.AttackTypes) then
                return A.Overpower:Show(icon)
            end 
            
            -- Whirlwind
            if A.Whirlwind:IsReady(unitID, true) and isTargetInMelee and A.Whirlwind:AbsentImun(unitID, Temp.AttackTypes) then
                return A.Whirlwind:Show(icon)
            end
        end
        
        -- [[ CLEAVE ]]
        if inAoE and GetByRange(2, 8) and not GetByRange(5, 8) then
            -- Rend
            if A.Rend:IsReady(unitID) and (Unit(unitID):HasDeBuffs(A.Rend.ID, true) <= 3.6 and Unit(player):HasBuffs(A.SweepingStrikesBuff.ID) > 0) and A.Rend:AbsentImun(unitID, Temp.AttackTypes) then
                return A.Rend:Show(icon)
            end
            
            -- Skullsplitter
            if A.Skullsplitter:IsReady(unitID) and (rage < 60 and (A.DeadlyCalm:GetCooldown() > 3 or not A.DeadlyCalm:IsSpellLearned())) and A.Skullsplitter:AbsentImun(unitID, Temp.AttackTypes) then
                return A.Skullsplitter:Show(icon)
            end
            
            -- [[ BURST ]] 
            if isTargetInMelee and BurstIsON(unitID) and ((Unit(unitID):IsBoss() or Unit(unitID):IsPlayer()) and Unit(unitID):TimeToDie() >= GetToggle(2, "BurstTTDBoss") or not Unit(unitID):IsBoss() and not Unit(unitID):IsPlayer() and Unit(unitID):TimeToDie() >= GetToggle(2, "BurstTTDMobs")) and canCleave then
                -- DeadlyCalm
                if A.DeadlyCalm:IsReady(player) and ((A.Bladestorm:GetCooldown() > 6 or A.Ravager:IsSpellLearned() and A.Ravager:GetCooldown() > 6) and (A.ColossusSmash:GetCooldown() < 2 or (A.Warbreaker:IsSpellLearned() and A.Warbreaker:GetCooldown() < 2))) then
                    return A.DeadlyCalm:Show(icon)
                end
                
                -- Ravager 
                if A.Ravager:IsReady(unitID, true) and (A.ColossusSmash:GetCooldown() < 2 or (A.Warbreaker:IsSpellLearned() and A.Warbreaker:GetCooldown() < 2)) and A.Ravager:AbsentImun(unitID, Temp.AttackTypes) then
                    return A.Ravager:Show(icon)
                end
                
                -- ColossusSmash
                if A.ColossusSmash:IsReady(unitID) and not A.Warbreaker:IsSpellLearned() and A.ColossusSmash:AbsentImun(unitID, Temp.AttackTypes) then
                    return A.ColossusSmash:Show(icon)
                end
                
                -- Warbreaker
                if A.Warbreaker:IsReady(unitID, true) and A.Warbreaker:AbsentImun(unitID, Temp.AttackTypes) then
                    return A.Warbreaker:Show(icon)
                end
                
                -- Bladestorm
                if A.Bladestorm:IsReady(unitID, true) and ((Unit(unitID):HasDeBuffs(A.ColossusSmashDebuff.ID, true) > 4.5 and A.TestofMight:GetAzeriteRank() == 0) or Unit(player):HasBuffs(A.TestofMightBuff.ID) > 0) then
                    return A.Bladestorm:Show(icon)
                end
            end
            
            -- Overpower 
            if A.Overpower:IsReady(unitID) and A.SeismicWave:GetAzeriteRank() >= 1 and A.Overpower:AbsentImun(unitID, Temp.AttackTypes) then
                return A.Overpower:Show(icon)
            end 
            
            -- Cleave
            if A.Cleave:IsReady(unitID, true) and isTargetInMelee and A.Cleave:AbsentImun(unitID, Temp.AttackTypes) then
                return A.Cleave:Show(icon)
            end
            
            --Execute
            if A.Execute:IsReady(unitID) and  ((not A.Cleave:IsSpellLearned() and Unit(unitID):HasDeBuffs(A.DeepWoundsDebuff.ID, true) < 2) or Unit(player):HasBuffs(A.SuddenDeathBuff.ID) > 0) and A.Execute:AbsentImun(unitID, Temp.AttackTypes) then
                return A.Execute:Show(icon)
            end
            
            -- MortalStrike
            if A.MortalStrike:IsReady(unitID) and (not A.Cleave:IsSpellLearned() and Unit(unitID):HasDeBuffs(A.DeepWoundsDebuff.ID, true) < 2) and A.MortalStrike:AbsentImun(unitID, Temp.AttackTypes) then
                return A.MortalStrike:Show(icon)
            end
            
            -- Overpower
            if A.Overpower:IsReady(unitID) and A.Overpower:AbsentImun(unitID, Temp.AttackTypes) then
                return A.Overpower:Show(icon)
            end 
            
            -- Whirlwind
            if A.Whirlwind:IsReady(unitID, true) and isTargetInMelee and A.FervorofBattle:IsSpellLearned() and A.Whirlwind:AbsentImun(unitID, Temp.AttackTypes) then
                return A.Whirlwind:Show(icon)
            end
            
            -- Slam
            if A.Slam:IsReady(unitID) and not A.FervorofBattle:IsSpellLearned() and A.Slam:AbsentImun(unitID, Temp.AttackTypes) then
                return A.Slam:Show(icon)
            end
        end
        
        -- [[ SINGLE TARGET ]] 
        if (not inAoE or not GetByRange(2, 8)) and not isInExecute then
            -- Rend
            if A.Rend:IsReady(unitID) and (Unit(unitID):HasDeBuffs(A.Rend.ID, true) <= 3.6 and Unit(unitID):HasDeBuffs(A.ColossusSmashDebuff.ID, true) == 0) and A.Rend:AbsentImun(unitID, Temp.AttackTypes) then
                return A.Rend:Show(icon)
            end
            
            -- Skullsplitter
            if A.Skullsplitter:IsReady(unitID) and (rage < 60 and Unit(player):HasBuffs(A.DeadlyCalmBuff.ID) == 0 and Unit(player):HasBuffs(A.MemoryofLucidDreams.ID) == 0) and A.Skullsplitter:AbsentImun(unitID, Temp.AttackTypes) then
                return A.Skullsplitter:Show(icon)
            end
            
            -- [[ BURST ]] 
            if isTargetInMelee and BurstIsON(unitID) and ((Unit(unitID):IsBoss() or Unit(unitID):IsPlayer()) and Unit(unitID):TimeToDie() >= GetToggle(2, "BurstTTDBoss") or not Unit(unitID):IsBoss() and not Unit(unitID):IsPlayer() and Unit(unitID):TimeToDie() >= GetToggle(2, "BurstTTDMobs")) and canCleave then
                -- Ravager 
                if A.Ravager:IsReady(unitID, true) and (Unit(player):HasBuffs(A.DeadlyCalmBuff.ID) == 0 and (A.ColossusSmash:GetCooldown() < 2 or (A.Warbreaker:IsSpellLearned() and A.Warbreaker:GetCooldown() < 2))) and A.Ravager:AbsentImun(unitID, Temp.AttackTypes) then
                    return A.Ravager:Show(icon)
                end
                
                -- ColossusSmash
                if A.ColossusSmash:IsReady(unitID) and not A.Warbreaker:IsSpellLearned() and A.ColossusSmash:AbsentImun(unitID, Temp.AttackTypes) then
                    return A.ColossusSmash:Show(icon)
                end
                
                -- Warbreaker
                if A.Warbreaker:IsReady(unitID, true) and A.Warbreaker:AbsentImun(unitID, Temp.AttackTypes) then
                    return A.Warbreaker:Show(icon)
                end
                
                -- DeadlyCalm
                if A.DeadlyCalm:IsReady(player) then
                    return A.DeadlyCalm:Show(icon)
                end
                
                -- Execute
                if A.Execute:IsReady(unitID) and Unit(player):HasBuffs(A.SuddenDeathBuff.ID) > 0 and A.Execute:AbsentImun(unitID, Temp.AttackTypes) then
                    return A.Execute:Show(icon)
                end
                
                -- Bladestorm
                if A.Bladestorm:IsReady(unitID, true) and (A.MortalStrike:GetCooldown() > 0 and (not A.DeadlyCalm:IsSpellLearned() or Unit(player):HasBuffs(A.DeadlyCalmBuff.ID) == 0) and ((Unit(unitID):HasDeBuffs(A.ColossusSmashDebuff.ID, true) > 0 and not A.TestofMight:GetAzeriteRank() == 0) or Unit(player):HasBuffs(A.TestofMightBuff.ID) > 0) and Unit(player):HasBuffs(A.MemoryofLucidDreams.ID) == 0 and rage < 40) then
                    return A.Bladestorm:Show(icon)
                end
            end
            
            -- Execute
            if A.Execute:IsReady(unitID) and Unit(player):HasBuffs(A.SuddenDeathBuff.ID) > 0 and A.Execute:AbsentImun(unitID, Temp.AttackTypes) then
                return A.Execute:Show(icon)
            end
            
            -- Overpower
            if A.Overpower:IsReady(unitID) and ((rage < 30 and Unit(player):HasBuffs(A.MemoryofLucidDreams.ID) > 0 and Unit(unitID):HasDeBuffs(A.ColossusSmashDebuff.ID, true) > 0) or (rage < 70 and Unit(player):HasBuffs(A.MemoryofLucidDreams.ID) == 0)) and A.Overpower:AbsentImun(unitID, Temp.AttackTypes) then
                return A.Overpower:Show(icon)
            end
            
            -- MortalStrike
            if A.MortalStrike:IsReady(unitID) and A.MortalStrike:AbsentImun(unitID, Temp.AttackTypes) then
                return A.MortalStrike:Show(icon)
            end
            
            -- Whirlwind
            if A.Whirlwind:IsReady(unitID, true) and isTargetInMelee and (A.FervorofBattle:IsSpellLearned() and (Unit(player):HasBuffs(A.MemoryofLucidDreams.ID) > 0 or Unit(unitID):HasDeBuffs(A.ColossusSmashDebuff.ID, true) > 0 or Unit(player):HasBuffs(A.DeadlyCalmBuff.ID) > 0)) and A.Whirlwind:AbsentImun(unitID, Temp.AttackTypes) then
                return A.Whirlwind:Show(icon)
            end
            
            -- Overpower
            if A.Overpower:IsReady(unitID) and A.Overpower:AbsentImun(unitID, Temp.AttackTypes) then
                return A.Overpower:Show(icon)
            end 
            
            -- Whirlwind
            if A.Whirlwind:IsReady(unitID, true) and isTargetInMelee and (A.FervorofBattle:IsSpellLearned() and (Unit(player):HasBuffs(A.TestofMightBuff.ID) > 0 or Unit(unitID):HasDeBuffs(A.ColossusSmashDebuff.ID, true) > 0 and Unit(player):HasBuffs(A.TestofMightBuff.ID) == 0 and rage > 60)) and A.Whirlwind:AbsentImun(unitID, Temp.AttackTypes) then
                return A.Whirlwind:Show(icon)
            end
            
            -- Slam
            if A.Slam:IsReady(unitID) and not A.FervorofBattle:IsSpellLearned() and A.Slam:AbsentImun(unitID, Temp.AttackTypes) then
                return A.Slam:Show(icon)
            end
            
        end
        --[[
        
        -- Purge
        if A.ArcaneTorrent:AutoRacial(unitID) then 
            return A.ArcaneTorrent:Show(icon)
        end             
        
        -- Interrupts
        local Interrupt = Interrupts(unitID)
        if Interrupt then 
            return Interrupt:Show(icon)
        end 
        
        if A.VictoryRush:IsReady(unitID) and A.VictoryRush:AbsentImun(unitID, Temp.AttackTypes) and canCast and Unit(player):HealthPercent() <= victoryRushHP then
            return A.VictoryRush:Show(icon)
        end
        
        if BurstIsON(unitID) and InMelee(unitID) and inCombat and canCast then
            
            --blood_fury,if=buff.memory_of_lucid_dreams.remains<5|(!essence.memory_of_lucid_dreams.major&debuff.colossus_smash.up)
            if A.BloodFury:AutoRacial(unitID) and (Unit(player):HasBuffs(A.MemoryofLucidDreams.ID) < 5 or (not Azerite:EssenceHasMajor(A.MemoryofLucidDreams.ID) and
            Unit(unitID):HasDeBuffs(A.ColossusSmashDebuff.ID) > 0)) then
                return A.BloodFury:Show(icon)
            end
            
            --berserking,if=buff.memory_of_lucid_dreams.up|(!essence.memory_of_lucid_dreams.major&debuff.colossus_smash.up)
            if A.Berserking:AutoRacial(unitID) and (Unit(player):HasBuffs(A.MemoryofLucidDreams.ID) < 5 or (not Azerite:EssenceHasMajor(A.MemoryofLucidDreams.ID) and
            Unit(unitID):HasDeBuffs(A.ColossusSmashDebuff.ID) > 0)) then
                return A.Berserking:Show(icon)
            end
            
            --arcane_torrent,if=cooldown.mortal_strike.remains>1.5&buff.memory_of_lucid_dreams.down&rage<50
            if A.ArcaneTorrent:IsRacialReady(unitID) and (A.MortalStrike:GetCooldown() > 1.5 and Unit(player):HasBuffs(A.MemoryofLucidDreams.ID) == 0 and rage < 50) then
                return A.ArcaneTorrent:Show(icon)
            end 
            
            --lights_judgment,if=debuff.colossus_smash.down
            if A.LightsJudgment:AutoRacial(unitID) and Unit(unitID):HasDeBuffs(A.ColossusSmashDebuff.ID) == 0 then
                return A.LightsJudgment:Show(icon)
            end
            
            --fireblood,if=buff.memory_of_lucid_dreams.remains<5|(!essence.memory_of_lucid_dreams.major&debuff.colossus_smash.up)            
            if A.Fireblood:AutoRacial(unitID) and (Unit(player):HasBuffs(A.MemoryofLucidDreams.ID) < 5 or (not Azerite:EssenceHasMajor(A.MemoryofLucidDreams.ID) and
            Unit(unitID):HasDeBuffs(A.ColossusSmashDebuff.ID) > 0)) then
                return A.Fireblood:Show(icon)
            end 
            
            --ancestral_call,if=buff.memory_of_lucid_dreams.remains<5|(!essence.memory_of_lucid_dreams.major&debuff.colossus_smash.up)            
            if A.AncestralCall:AutoRacial(unitID) and (Unit(player):HasBuffs(A.MemoryofLucidDreams.ID) < 5 or (not Azerite:EssenceHasMajor(A.MemoryofLucidDreams.ID) and
            Unit(unitID):HasDeBuffs(A.ColossusSmashDebuff.ID) > 0)) then
                return A.AncestralCall:Show(icon)
            end
            
            --bag_of_tricks,if=buff.memory_of_lucid_dreams.remains<5|(!essence.memory_of_lucid_dreams.major&debuff.colossus_smash.up)
            if A.BagofTricks:AutoRacial(unitID) and (Unit(player):HasBuffs(A.MemoryofLucidDreams.ID) < 5 or (not Azerite:EssenceHasMajor(A.MemoryofLucidDreams.ID) and
            Unit(unitID):HasDeBuffs(A.ColossusSmashDebuff.ID) > 0)) then
                return A.BagofTricks:Show(icon)
            end
            
            --sweeping_strikes,if=spell_targets.whirlwind>1&(cooldown.bladestorm.remains>10|cooldown.colossus_smash.remains>8|azerite.test_of_might.enabled)
            if A.SweepingStrikes:IsReady(player) and (inAoE and GetByRange(2, 8) and ((A.Bladestorm:GetCooldown() > 10 or A.ColossusSmash:GetCooldown() > 8) or A.TestofMight:GetAzeriteRank() > 0)) then
                return A.SweepingStrikes:Show(icon)
            end
            
            --blood_of_the_enemy,if=buff.test_of_might.up|(debuff.colossus_smash.up&!azerite.test_of_might.enabled)
            if A.BloodoftheEnemy:AutoHeartOfAzerothP(unitID) and (Unit(player):HasBuffs(A.TestofMightBuff.ID) or (Unit(unitID):HasDeBuffs(A.ColossusSmashDebuff.ID) > 0 and
            A.TestofMight:GetAzeriteRank() == 0)) then
                return A.BloodoftheEnemy:Show(icon) 
            end

            --worldvein_resonance,if=!debuff.colossus_smash.up&!buff.test_of_might.up
            if A.WorldveinResonance:AutoHeartOfAzeroth(unitID) and Unit(unitID):HasDeBuffs(A.ColossusSmashDebuff.ID, true) == 0 and Unit(player):HasBuffs(A.TestofMightBuff.ID) == 0 then
                return A.WorldveinResonance:Show(icon)
            end
            
            --focused_azerite_beam,if=!debuff.colossus_smash.up&!buff.test_of_might.up
            if A.FocusedAzeriteBeam:AutoHeartOfAzeroth(unitID) and Unit(unitID):HasDeBuffs(A.ColossusSmashDebuff.ID, true) == 0 and Unit(player):HasBuffs(A.TestofMightBuff.ID) == 0 then
                return A.FocusedAzeriteBeam:Show(icon)
            end 

            --reaping_flames,if=!debuff.colossus_smash.up&!buff.test_of_might.up
            if A.ReapingFlames:AutoHeartOfAzerothP(unitID) and Unit(unitID):HasDeBuffs(A.ColossusSmashDebuff.ID, true) == 0 and Unit(player):HasBuffs(A.TestofMightBuff.ID) == 0 then
                return A.ReapingFlames:Show(icon)
            end
            
            --concentrated_flame,if=!debuff.colossus_smash.up&!buff.test_of_might.up&dot.concentrated_flame_burn.remains=0
            if A.ConcentratedFlame:AutoHeartOfAzerothP(unitID) and (Unit(unitID):HasDeBuffs(A.ColossusSmashDebuff.ID, true) == 0 and Unit(player):HasBuffs(A.TestofMightBuff.ID) == 0
            and Unit(unitID):HasDeBuffs(A.ConcentratedFlameDebuff.ID) == 0) then
                return A.ConcentratedFlame:Show(icon)
            end
            
            --the_unbound_force,if=buff.reckless_force.up
            if A.TheUnboundForce:AutoHeartOfAzeroth(unitID) and Unit(player):HasBuffs(A.RecklessForceBuff.ID, true) > 0 then
                return A.TheUnboundForce:Show(icon)
            end
            
            --guardian_of_azeroth,if=cooldown.colossus_smash.remains<10
            if A.GuardianofAzeroth:AutoHeartOfAzerothP(unitID) and A.ColossusSmash:GetCooldown() < 10 then 
                return A.GuardianofAzeroth:Show(icon)
            end
            
            --memory_of_lucid_dreams,if=!talent.warbreaker.enabled&cooldown.colossus_smash.remains<gcd&(target.time_to_die>150|target.health.pct<20)
            if A.MemoryofLucidDreams:AutoHeartOfAzerothP(unitID) and (not A.Warbreaker:IsSpellLearned() and A.ColossusSmash:GetCooldown() < GetGCD() + GetCurrentGCD() and 
            (Unit(unitID):TimeToDie() > 150 or Unit(unitID):HealthPercent() < 20)) then
                return A.MemoryofLucidDreams:Show(icon)
            end
            
            --memory_of_lucid_dreams,if=talent.warbreaker.enabled&cooldown.warbreaker.remains<gcd&(target.time_to_die>150|target.health.pct<20)
            if A.MemoryofLucidDreams:AutoHeartOfAzerothP(unitID) and (A.Warbreaker:IsSpellLearned() and A.Warbreaker:GetCooldown() < GetGCD() + GetCurrentGCD() and 
            (Unit(unitID):TimeToDie() > 150 or Unit(unitID):HealthPercent() < 20)) then
                return A.MemoryofLucidDreams:Show(icon)
            end
            
            if A.Trinket1:IsReady(unitID) and A.Trinket1:GetItemCategory() ~= "DEFF" and A.Trinket1:AbsentImun(unitID, "DamageMagicImun") and not Temp.IsSlotTrinketBlocked[A.Trinket1.ID] and
            Unit(unitID):HasDeBuffs(A.ColossusSmashDebuff.ID, true) > 0 then  
                return A.Trinket1:Show(icon)    
            end 
                
            if A.Trinket2:IsReady(unitID) and A.Trinket2:GetItemCategory() ~= "DEFF" and A.Trinket2:AbsentImun(unitID, "DamageMagicImun") and not Temp.IsSlotTrinketBlocked[A.Trinket2.ID] and
            Unit(unitID):HasDeBuffs(A.ColossusSmashDebuff.ID, true) > 0 then 
                return A.Trinket2:Show(icon)
            end   
            
            local targetCoralDebuff = MultiUnits:GetByRangeAppliedDoTs(nil, 2, A.RazorCoralDebuff.ID)
            if A.AshvanesRazorCoral:IsReady(unitID, true) and (Unit(unitID):HasDeBuffs(A.RazorCoralDebuff.ID, true) == 0 and targetCoralDebuff == 0 or 
            Unit(unitID):HealthPercent() < 31 and  Unit(unitID):HasDeBuffs(A.RazorCoralDebuff.ID, true) > 0) then 
                return A.AshvanesRazorCoral:Show(icon)
            end 
        end
        
        
        -- Five Targets
        if inAoE and GetByRange(5, 8) then
            --skullsplitter,if=rage<60&(!talent.deadly_calm.enabled|buff.deadly_calm.down)
            if A.Skullsplitter:IsReady(unitID) and A.Skullsplitter:AbsentImun(unitID, Temp.AttackTypes) and canCast and (rage < 60 and (not A.DeadlyCalm:IsSpellLearned() or 
            Unit(player):HasBuffs(A.DeadlyCalmBuff.ID) == 0)) then
                return A.Skullsplitter:Show(icon)
            end
            
            if A.BurstIsON(unitID) and InMelee(unitID) and canCast then
                --ravager,if=(!talent.warbreaker.enabled|cooldown.warbreaker.remains<2)
                if A.Ravager:IsReady(unitID, true) and A.Ravager:AbsentImun(unitID, Temp.AttackTypes) and (GetByRangeTTD(5, 6) > 4 and 
                (not A.Warbreaker:IsSpellLearned() or A.Warbreaker:GetCooldown() < 2)) then
                    return A.Ravager:Show(icon)
                end
                
                --colossus_smash,if=debuff.colossus_smash.down
                if A.ColossusSmash:IsReady(unitID) and A.ColossusSmash:AbsentImun(unitID, Temp.AttackTypes) and not A.Warbreaker:IsSpellLearned() and Unit(unitID):TimeToDie() > 2 and
                Unit(unitID):HasDeBuffs(A.ColossusSmashDebuff.ID, true) == 0 then
                    return A.ColossusSmash:Show(icon)
                end
                
                --warbreaker,if=debuff.colossus_smash.down
                if A.Warbreaker:IsReady(unitID, true) and A.Warbreaker:AbsentImun(unitID, Temp.AttackTypes) and A.Warbreaker:IsSpellLearned() and GetByRangeTTD(5, 8) > 2 and
                Unit(unitID):HasDeBuffs(A.ColossusSmashDebuff.ID, true) == 0 then
                    return A.Warbreaker:Show(icon)
                end
                
                --bladestorm,if=buff.sweeping_strikes.down&(!talent.deadly_calm.enabled|buff.deadly_calm.down)&((debuff.colossus_smash.remains>4.5&!azerite.test_of_might.enabled)|buff.test_of_might.up)
                if A.Bladestorm:IsReady(unitID, true) and A.Bladestorm:AbsentImun(unitID, Temp.AttackTypes) and GetByRangeTTD(5, 6) > 3 and 
                (Unit(player):HasBuffs(A.SweepingStrikesBuff.ID) == 0 and (not A.DeadlyCalm:IsSpellLearned() or Unit(player):HasBuffs(A.DeadlyCalmBuff.ID) == 0) and 
                ((Unit(unitID):HasDeBuffs(A.ColossusSmashDebuff.ID, true) > 4.5 and A.TestofMight:GetAzeriteRank() == 0) or Unit(player):HasBuffs(A.TestofMightBuff.ID) > 0)) then
                    return A.Bladestorm:Show(icon)
                end
                --deadly_calm
                if A.DeadlyCalm:IsReady(player) then
                    return A.DeadlyCalm:Show(icon)
                end
            end
            
            --cleave
            if A.Cleave:IsReady(unitID, true) and A.Cleave:AbsentImun(unitID, Temp.AttackTypes) and InMelee(unitID) and canCast then
                return A.Cleave:Show(icon)
            end
            
            --execute,if=(!talent.cleave.enabled&dot.deep_wounds.remains<2)|(buff.sudden_death.react|buff.stone_heart.react)&(buff.sweeping_strikes.up|cooldown.sweeping_strikes.remains>8)            
            if A.Execute:IsReady(unitID) and A.Execute:AbsentImun(unitID, Temp.AttackTypes) and canCast and ((not A.Cleave:IsSpellLearned() and Unit(unitID):HasDeBuffs(A.DeepWoundsDebuff.ID, true) < 2) or
            (Unit(player):HasBuffs(A.SuddenDeathBuff.ID) > 0 or Unit(player):HasBuffs(A.StoneHeartBuff.ID) > 0) and (Unit(player):HasBuffs(A.SweepingStrikesBuff.ID) > 0 or A.SweepingStrikes:GetCooldown() > 8)) then
                return A.Execute:Show(icon)
            end
            
            --mortal_strike,if=(!talent.cleave.enabled&dot.deep_wounds.remains<2)|buff.sweeping_strikes.up&buff.overpower.stack=2&(talent.dreadnaught.enabled|buff.executioners_precision.stack=2)
            if A.MortalStrike:IsReadyByPassCastGCD(unitID) and A.MortalStrike:AbsentImun(unitID, Temp.AttackTypes) and canCast and ((not A.Cleave:IsSpellLearned() and 
            Unit(unitID):HasDeBuffs(A.DeepWoundsDebuff.ID, true) < 2) or Unit(player):HasBuffs(A.SweepingStrikesBuff.ID) > 0 and Unit(player):HasBuffsStacks(A.Overpower.ID, true) == 2 and 
            (A.Dreadnaught:IsSpellLearned() or Unit(player):HasBuffsStacks(A.ExecutionersPrecisionBuff.ID, true) == 2)) then
                return A.MortalStrike:Show(icon)
            end
            
            --whirlwind,if=debuff.colossus_smash.up|(buff.crushing_assault.up&talent.fervor_of_battle.enabled)
            if A.Whirlwind:IsReady(unitID, true) and A.Whirlwind:AbsentImun(unitID, Temp.AttackTypes) and InMelee(unitID) and canCast and (Unit(unitID):HasDeBuffs(A.ColossusSmashDebuff.ID, true) > 0 or
            (A.FervorofBattle:IsSpellLearned() and Unit(player):HasBuffs(A.CrushingAssaultBuff.ID) > 0)) then
                return A.Whirlwind:Show(icon)
            end
            
            --whirlwind,if=buff.deadly_calm.up|rage>60
            if A.Whirlwind:IsReady(unitID, true) and A.Whirlwind:AbsentImun(unitID, Temp.AttackTypes) and canCast and InMelee(unitID) and (Unit(player):HasBuffs(A.DeadlyCalmBuff.ID) > 0 or
            rage > 60) then
                return A.Whirlwind:Show(icon)
            end
            
            --overpower
            if A.Overpower:IsReady(unitID) and A.Overpower:AbsentImun(unitID, Temp.AttackTypes) and canCast then
                return A.Overpower:Show(icon)
            end
            
            --whirlwind
            if A.Whirlwind:IsReady(unitID, true) and A.Whirlwind:AbsentImun(unitID, Temp.AttackTypes) and InMelee(unitID) and canCast then
                return A.Whirlwind:Show(icon)
            end
        end
        
        -- Hac
        if inAoE and GetByRange(2, 8) then
            --rend,if=remains<=duration*0.3&(!raid_event.adds.up|buff.sweeping_strikes.up)
            if A.Rend:IsReady(unitID) and A.Rend:AbsentImun(unitID, Temp.AttackTypes) and canCast and (Unit(unitID):HasDeBuffs(A.Rend.ID, true) <= GetGCD() + GetCurrentGCD() and 
            Unit(player):HasBuffs(A.SweepingStrikesBuff.ID) > 0) then
                return A.Rend:Show(icon)
            end
            
            --skullsplitter,if=rage<60&(cooldown.deadly_calm.remains>3|!talent.deadly_calm.enabled)
            if A.Skullsplitter:IsReady(unitID) and A.Skullsplitter:AbsentImun(unitID, Temp.AttackTypes) and canCast and (rage < 60 and 
            (A.DeadlyCalm:GetCooldown() > 3 or not A.DeadlyCalm:IsSpellLearned())) then
                return A.Skullsplitter:Show(icon)
            end
            
            if BurstIsON(unitID) and InMelee(unitID) and canCast then
                --deadly_calm,if=(cooldown.bladestorm.remains>6|talent.ravager.enabled&cooldown.ravager.remains>6)&(cooldown.colossus_smash.remains<2|(talent.warbreaker.enabled&cooldown.warbreaker.remains<2))
                if A.DeadlyCalm:IsReady(player) and ((A.Bladestorm:GetCooldown() > 6 or A.Ravager:IsSpellLearned() and A.Ravager:GetCooldown() > 6) and (A.ColossusSmash:GetCooldown() < 2 or 
                (A.Warbreaker:IsSpellLearned() and A.Warbreaker:GetCooldown() < 2))) then
                    return A.DeadlyCalm:Show(icon)
                end
                
                --ravager,if=(raid_event.adds.up|raid_event.adds.in>target.time_to_die)&(cooldown.colossus_smash.remains<2|(talent.warbreaker.enabled&cooldown.warbreaker.remains<2))
                if A.Ravager:IsReady(unitID, true) and A.Ravager:AbsentImun(unitID, Temp.AttackTypes) and (GetByRangeTTD(2, 6) > 4 and 
                (A.ColossusSmash:GetCooldown() < 2 or (A.Warbreaker:IsSpellLearned() and A.Warbreaker:GetCooldown() < 2))) then
                    return A.Ravager:Show(icon)
                end
                
                --colossus_smash,if=raid_event.adds.up|raid_event.adds.in>40|(raid_event.adds.in>20&talent.anger_management.enabled)
                if A.ColossusSmash:IsReady(unitID) and A.ColossusSmash:AbsentImun(unitID, Temp.AttackTypes) and not A.Warbreaker:IsSpellLearned() and Unit(unitID):TimeToDie() > 2 then
                    return A.ColossusSmash:Show(icon)
                end
                
                --warbreaker,if=raid_event.adds.up|raid_event.adds.in>40|(raid_event.adds.in>20&talent.anger_management.enabled)
                if A.Warbreaker:IsReady(unitID, true) and A.Warbreaker:AbsentImun(unitID, Temp.AttackTypes) and A.Warbreaker:IsSpellLearned() and GetByRangeTTD(2, 8) > 2 then
                    return A.Warbreaker:Show(icon)
                end
                
                --bladestorm,if=(debuff.colossus_smash.up&raid_event.adds.in>target.time_to_die)|raid_event.adds.up&((debuff.colossus_smash.remains>4.5&!azerite.test_of_might.enabled)|buff.test_of_might.up)
                if A.Bladestorm:IsReady(unitID, true) and A.Bladestorm:AbsentImun(unitID, Temp.AttackTypes) and GetByRangeTTD(2, 6) > 3 and 
                (Unit(unitID):HasDeBuffs(A.ColossusSmashDebuff.ID, true) > 4.5 and A.TestofMight:GetAzeriteRank() == 0 or Unit(player):HasBuffs(A.TestofMightBuff.ID) > 0) then
                    return A.Bladestorm:Show(icon)
                end                
            end
            
            --overpower,if=!raid_event.adds.up|(raid_event.adds.up&azerite.seismic_wave.enabled)
            if A.Overpower:IsReady(unitID) and A.Overpower:AbsentImun(unitID, Temp.AttackTypes) and canCast and A.SeismicWave:GetAzeriteRank() > 0 then
                return A.Overpower:Show(icon)
            end
            
            --cleave,if=spell_targets.whirlwind>2
            if A.Cleave:IsReady(unitID, true) and A.Cleave:AbsentImun(unitID, Temp.AttackTypes) and canCast and InMelee(unitID) and GetByRange(3, 5) then
                return A.Cleave:Show(icon)
            end
            
            --execute,if=!raid_event.adds.up|(!talent.cleave.enabled&dot.deep_wounds.remains<2)|buff.sudden_death.react
            if A.Execute:IsReady(unitID) and A.Execute:AbsentImun(unitID, Temp.AttackTypes) and canCast and ((not A.Cleave:IsSpellLearned() and 
            Unit(unitID):HasDeBuffs(A.DeepWoundsDebuff.ID, true) < 2) or Unit(player):HasBuffs(A.SuddenDeathBuff.ID) > 0) then
                return A.Execute:Show(icon)
            end
            
            --mortal_strike,if=!raid_event.adds.up|(!talent.cleave.enabled&dot.deep_wounds.remains<2)
            if A.MortalStrike:IsReadyByPassCastGCD(unitID) and A.MortalStrike:AbsentImun(unitID, Temp.AttackTypes) and canCast and (not A.Cleave:IsSpellLearned() and 
            Unit(unitID):HasDeBuffs(A.DeepWoundsDebuff.ID, true) < 2) then
                return A.MortalStrike:Show(icon)
            end
            
            --overpower
            if A.Overpower:IsReady(unitID) and A.Overpower:AbsentImun(unitID, Temp.AttackTypes) and canCast then
                return A.Overpower:Show(icon)
            end
            
            --whirlwind,if=talent.fervor_of_battle.enabled
            if A.Whirlwind:IsReady(unitID, true) and A.Whirlwind:AbsentImun(unitID, Temp.AttackTypes) and canCast and InMelee(unitID) and A.FervorofBattle:IsSpellLearned() then
                return A.Whirlwind:Show(icon)
            end
            
            --slam,if=!talent.fervor_of_battle.enabled&!raid_event.adds.up
            if A.Slam:IsReady(unitID) and A.Slam:AbsentImun(unitID, Temp.AttackTypes) and canCast and not A.FervorofBattle:IsSpellLearned() then
                return A.Slam:Show(icon)
            end
        end
        
        -- Execute
        if A.Massacre:IsSpellLearned() and Unit(unitID):HealthPercent() < 35 or Unit(unitID):HealthPercent() < 20 then
            --skullsplitter,if=rage<60&buff.deadly_calm.down&buff.memory_of_lucid_dreams.down
            if A.Skullsplitter:IsReady(unitID) and A.Skullsplitter:AbsentImun(unitID, Temp.AttackTypes) and canCast and (rage < 60 and Unit(player):HasBuffs(A.DeadlyCalmBuff.ID) == 0 and
            Unit(player):HasBuffs(A.MemoryofLucidDreams.ID) == 0) then
                return A.Skullsplitter:Show(icon)
            end
            
            if BurstIsON(unitID) and InMelee(unitID) and canCast then
                --ravager,if=!buff.deadly_calm.up&(cooldown.colossus_smash.remains<2|(talent.warbreaker.enabled&cooldown.warbreaker.remains<2))
                if A.Ravager:IsReady(unitID, true) and A.Ravager:AbsentImun(unitID, Temp.AttackTypes) and (Unit(unitID):TimeToDie() > 4 and Unit(player):HasBuffs(A.DeadlyCalmBuff.ID) == 0 and 
                (A.ColossusSmash:GetCooldown() < 2 or (A.Warbreaker:IsSpellLearned() and A.Warbreaker:GetCooldown() < 2))) then                
                    return A.Ravager:Show(icon)
                end
                
                --colossus_smash,if=!essence.memory_of_lucid_dreams.major|(buff.memory_of_lucid_dreams.up|cooldown.memory_of_lucid_dreams.remains>10)
                if A.ColossusSmash:IsReady(unitID) and A.ColossusSmash:AbsentImun(unitID, Temp.AttackTypes) and not A.Warbreaker:IsSpellLearned() and (not Azerite:EssenceHasMajor(A.MemoryofLucidDreams.ID) or
                (Unit(player):HasBuffs(A.MemoryofLucidDreams.ID, true) > 0 or A.MemoryofLucidDreams:GetCooldown() > 10) and Unit(unitID):TimeToDie() > 2) then
                    return A.ColossusSmash:Show(icon)
                end
                
                --warbreaker,if=!essence.memory_of_lucid_dreams.major|(buff.memory_of_lucid_dreams.up|cooldown.memory_of_lucid_dreams.remains>10)
                if A.Warbreaker:IsReady(unitID, true) and A.Warbreaker:AbsentImun(unitID, Temp.AttackTypes) and A.Warbreaker:IsSpellLearned() and Unit(unitID):TimeToDie() > 2 and 
                (not Azerite:EssenceHasMajor(A.MemoryofLucidDreams.ID) or (Unit(player):HasBuffs(A.MemoryofLucidDreams.ID, true) > 0 or A.MemoryofLucidDreams:GetCooldown() > 10)) then
                    return A.Warbreaker:Show(icon)
                end
                
                --deadly_calm
                if A.DeadlyCalm:IsReady(player) then
                    return A.DeadlyCalm:Show(icon)
                end
                
                --bladestorm,if=!buff.memory_of_lucid_dreams.up&buff.test_of_might.up&rage<30&!buff.deadly_calm.up
                if A.Bladestorm:IsReady(unitID, true) and A.Bladestorm:AbsentImun(unitID, Temp.AttackTypes) and Unit(unitID):TimeToDie() > 2 and
                (Unit(player):HasBuffs(A.MemoryofLucidDreams.ID, true) == 0 and Unit(player):HasBuffs(A.TestofMightBuff.ID) > 0 and rage < 30 
                and Unit(player):HasBuffs(A.DeadlyCalmBuff.ID) == 0) then
                    return A.Bladestorm:Show(icon)
                end
            end
            
            --cleave,if=spell_targets.whirlwind>2
            if A.Cleave:IsReady(unitID, true) and A.Cleave:AbsentImun(unitID, Temp.AttackTypes) and InMelee(unitID) and canCast and inAoE and GetByRange(3, 5) then
                return A.Cleave:Show(icon)
            end
            
            --slam,if=buff.crushing_assault.up&buff.memory_of_lucid_dreams.down
            if A.Slam:IsReady(unitID) and A.Slam:AbsentImun(unitID, Temp.AttackTypes) and canCast and (Unit(player):HasBuffs(A.CrushingAssaultBuff.ID) > 0 and 
            Unit(player):HasBuffs(A.MemoryofLucidDreams.ID, true) == 0) then
                return A.Slam:Show(icon)
            end
            
            --mortal_strike,if=buff.overpower.stack=2&talent.dreadnaught.enabled|buff.executioners_precision.stack=2
            if A.MortalStrike:IsReadyByPassCastGCD(unitID) and A.MortalStrike:AbsentImun(unitID, Temp.AttackTypes) and canCast and (Unit(player):HasBuffsStacks(A.Overpower.ID, true) == 2 and
            A.Dreadnaught:IsSpellLearned() or Unit(player):HasBuffsStacks(A.ExecutionersPrecisionBuff.ID, true) == 2) then
                return A.MortalStrike:Show(icon)
            end
            
            --execute,if=buff.memory_of_lucid_dreams.up|buff.deadly_calm.up|(buff.test_of_might.up&cooldown.memory_of_lucid_dreams.remains>94)
            if A.Execute:IsReady(unitID) and A.Execute:AbsentImun(unitID, Temp.AttackTypes) and canCast and (Unit(player):HasBuffs(A.MemoryofLucidDreams.ID, true) > 0 or 
            Unit(player):HasBuffs(A.DeadlyCalmBuff.ID) > 0 or (Unit(player):HasBuffs(A.TestofMightBuff.ID) > 0 and A.MemoryofLucidDreams:GetCooldown() > 94)) then
                return A.Execute:Show(icon)
            end
            
            --overpower
            if A.Overpower:IsReady(unitID) and A.Overpower:AbsentImun(unitID, Temp.AttackTypes) and canCast then
                return A.Overpower:Show(icon)
            end
            
            --execute
            if A.Execute:IsReady(unitID) and A.Execute:AbsentImun(unitID, Temp.AttackTypes) and canCast then
                return A.Execute:Show(icon)
            end
        end]]
    end
    
    local function EnemyRotationPvP(unitID)
        -- Purge
        if A.ArcaneTorrent:AutoRacial(unitID) then 
            return A.ArcaneTorrent:Show(icon)
        end             
        
        -- [[ INTERRUPTS ]] 
        local useKick, useCC, useRacial = InterruptIsValid(unitID, "TargetMouseover")
        
        if useKick or useCC or useRacial then         
            local castLeft, _, _, _, notKickAble = Unit(unitID):IsCastingRemains()
            
            -- useKick
            if useKick and castLeft > 0 and not notKickAble and A.AbsentImun(nil, unitID, Temp.AuraForInterrupt) and Unit(unitID):CanInterrupt(nil, nil, 15, 67) and A.Pummel:IsReady(unitID) then 
                return A.Pummel:Show(icon)
            end
            
            -- useCC / useRacial
            if not useKick or notKickAble or A.Pummel:GetCooldown() > 0 then
                if useCC and castLeft > GetCurrentGCD() and castLeft < GetGCD() + GetCurrentGCD() + 0.2 and A.StormBolt:IsReady(unitID) and A.StormBolt:AbsentImun(unitID, Temp.AuraForStun) and Unit(unitID):IsControlAble("stun") then 
                    return A.StormBolt:Show(icon)
                end 
                
                if useCC and castLeft > GetCurrentGCD() and castLeft < GetGCD() + GetCurrentGCD() + 0.2 and A.IntimidatingShout:IsReady(unitID) and A.IntimidatingShout:AbsentImun(unitID, Temp.AuraForFear) and Unit(unitID):IsControlAble("fear") then 
                    return A.IntimidatingShout:Show(icon)       
                end 
            end
        end
        
        -- Disarm
        if A.DisarmIsReady(unitID) then 
            return A.Disarm:Show(icon)
        end
        
        if A.VictoryRush:IsReady(unitID) and A.VictoryRush:AbsentImun(unitID, Temp.AttackTypes) and canCast and Unit(player):HealthPercent() <= victoryRushHP then
            return A.VictoryRush:Show(icon)
        end
        
        -- DefensiveStance
        if inCombat and A.DefensiveStance:IsReady(player) and Unit(player):HasBuffs(A.DefensiveStance.ID) > 0 and Unit(player):HealthPercent() > 50 and Unit(player):TimeToDieX(30) > 5 and InMelee(unitID) then
            return A.DefensiveStance:Show(icon)
        end
        
        if inCombat and A.DefensiveStance:IsReady(player) and Unit(player):HasBuffs(A.DefensiveStance.ID) == 0 and (Unit(player):HealthPercent() < 50 or Unit(player):TimeToDieX(30) < 5) and Unit(player):IsFocused(nil, true) then
            return A.DefensiveStance:Show(icon)
        end
        
        -- Hamstring (slow)
        if Unit(unitID):GetRange() <= 14 and A.Hamstring:IsReady(unitID) and A.Hamstring:AbsentImun(unitID, Temp.AuraForSlow) and Unit(unitID):GetMaxSpeed() >= 100 and Unit(unitID):HasDeBuffs("Slowed") == 0 and not Unit(unitID):IsTotem() then
            return A.Hamstring:Show(icon)
        end    
        
        -- Stormbolt (stun)
        if A.StormBolt:IsReady(unitID) and A.StormBolt:AbsentImun(unitID, Temp.TotalAndPhysAndCCAndStun, true) and BurstIsON(unitID) and Unit(unitID):HasBuffs("DeffBuffs", true) == 0 and 
        (Unit(unitID):TimeToDie() < 15 or Unit(unitID):IsHealer()) and (Unit(unitID):HasDeBuffs(A.ColossusSmashDebuff.ID) > 0 or Unit(unitID):TimeToDie() < 5) then
            return A.StormBolt:Show(icon)
        end
        
        if A.Execute:IsReady(unitID) and Unit(player):HasBuffs(A.SuddenDeathBuff.ID) > 0 and A.Execute:AbsentImun(unitID, Temp.AttackTypes) then
            return A.Execute:Show(icon)
        end
        
        if BurstIsON(unitID) and InMelee(unitID) and Unit(unitID):HasDeBuffs(A.ColossusSmashDebuff.ID) > 0 then
            if A.Ravager:IsReady(unitID, true) and A.Ravager:AbsentImun(unitID, Temp.AttackTypes) and (Unit(unitID):TimeToDie() > 4 and Unit(player):HasBuffs(A.DeadlyCalmBuff.ID) == 0 and 
                (A.ColossusSmash:GetCooldown() < 2 or (A.Warbreaker:IsSpellLearned() and A.Warbreaker:GetCooldown() < 2))) then
                return A.Ravager:Show(icon)
            end
            
            if A.DeadlyCalm:IsReady(player) then
                return A.DeadlyCalm:Show(icon)
            end
            
            if A.Avatar:IsReady(player) then
                return A.Avatar:Show(icon)
            end
            
            if A.Bladestorm:IsReady(unitID, true) and A.Bladestorm:AbsentImun(unitID, Temp.AttackTypes) then
                return A.Bladestorm:Show(icon)
            end
            
            --blood_fury,if=buff.memory_of_lucid_dreams.remains<5|(!essence.memory_of_lucid_dreams.major&debuff.colossus_smash.up)
            if A.BloodFury:AutoRacial(unitID) and (Unit(player):HasBuffs(A.MemoryofLucidDreams.ID) < 5 or (not Azerite:EssenceHasMajor(A.MemoryofLucidDreams.ID) and
                    Unit(unitID):HasDeBuffs(A.ColossusSmashDebuff.ID) > 0)) then
                return A.BloodFury:Show(icon)
            end
            
            --berserking,if=buff.memory_of_lucid_dreams.up|(!essence.memory_of_lucid_dreams.major&debuff.colossus_smash.up)
            if A.Berserking:AutoRacial(unitID) and (Unit(player):HasBuffs(A.MemoryofLucidDreams.ID) < 5 or (not Azerite:EssenceHasMajor(A.MemoryofLucidDreams.ID) and
                    Unit(unitID):HasDeBuffs(A.ColossusSmashDebuff.ID) > 0)) then
                return A.Berserking:Show(icon)
            end
            
            --arcane_torrent,if=cooldown.mortal_strike.remains>1.5&buff.memory_of_lucid_dreams.down&rage<50
            if A.ArcaneTorrent:IsRacialReady(unitID) and (A.MortalStrike:GetCooldown() > 1.5 and Unit(player):HasBuffs(A.MemoryofLucidDreams.ID) == 0 and rage < 50) then
                return A.ArcaneTorrent:Show(icon)
            end 
            
            --lights_judgment,if=debuff.colossus_smash.down
            if A.LightsJudgment:AutoRacial(unitID) and Unit(unitID):HasDeBuffs(A.ColossusSmashDebuff.ID) == 0 then
                return A.LightsJudgment:Show(icon)
            end
            
            --fireblood,if=buff.memory_of_lucid_dreams.remains<5|(!essence.memory_of_lucid_dreams.major&debuff.colossus_smash.up)            
            if A.Fireblood:AutoRacial(unitID) and (Unit(player):HasBuffs(A.MemoryofLucidDreams.ID) < 5 or (not Azerite:EssenceHasMajor(A.MemoryofLucidDreams.ID) and
                    Unit(unitID):HasDeBuffs(A.ColossusSmashDebuff.ID) > 0)) then
                return A.Fireblood:Show(icon)
            end 
            
            --ancestral_call,if=buff.memory_of_lucid_dreams.remains<5|(!essence.memory_of_lucid_dreams.major&debuff.colossus_smash.up)            
            if A.AncestralCall:AutoRacial(unitID) and (Unit(player):HasBuffs(A.MemoryofLucidDreams.ID) < 5 or (not Azerite:EssenceHasMajor(A.MemoryofLucidDreams.ID) and
                    Unit(unitID):HasDeBuffs(A.ColossusSmashDebuff.ID) > 0)) then
                return A.AncestralCall:Show(icon)
            end
            
            --bag_of_tricks,if=buff.memory_of_lucid_dreams.remains<5|(!essence.memory_of_lucid_dreams.major&debuff.colossus_smash.up)
            if A.BagofTricks:AutoRacial(unitID) and (Unit(player):HasBuffs(A.MemoryofLucidDreams.ID) < 5 or (not Azerite:EssenceHasMajor(A.MemoryofLucidDreams.ID) and
                    Unit(unitID):HasDeBuffs(A.ColossusSmashDebuff.ID) > 0)) then
                return A.BagofTricks:Show(icon)
            end
            
            --sweeping_strikes,if=spell_targets.whirlwind>1&(cooldown.bladestorm.remains>10|cooldown.colossus_smash.remains>8|azerite.test_of_might.enabled)
            if A.SweepingStrikes:IsReady(player) and (inAoE and GetByRange(2, 8) and ((A.Bladestorm:GetCooldown() > 10 or A.ColossusSmash:GetCooldown() > 8) or A.TestofMight:GetAzeriteRank() > 0)) then
                return A.SweepingStrikes:Show(icon)
            end
            
            --blood_of_the_enemy,if=buff.test_of_might.up|(debuff.colossus_smash.up&!azerite.test_of_might.enabled)
            if A.BloodoftheEnemy:AutoHeartOfAzerothP(unitID) and (Unit(player):HasBuffs(A.TestofMightBuff.ID) or (Unit(unitID):HasDeBuffs(A.ColossusSmashDebuff.ID) > 0 and
                    A.TestofMight:GetAzeriteRank() == 0)) then
                return A.BloodoftheEnemy:Show(icon) 
            end
            
            --worldvein_resonance,if=!debuff.colossus_smash.up&!buff.test_of_might.up
            if A.WorldveinResonance:AutoHeartOfAzeroth(unitID) and Unit(unitID):HasDeBuffs(A.ColossusSmashDebuff.ID, true) == 0 and Unit(player):HasBuffs(A.TestofMightBuff.ID) == 0 then
                return A.WorldveinResonance:Show(icon)
            end
            
            --focused_azerite_beam,if=!debuff.colossus_smash.up&!buff.test_of_might.up
            if A.FocusedAzeriteBeam:AutoHeartOfAzeroth(unitID) and Unit(unitID):HasDeBuffs(A.ColossusSmashDebuff.ID, true) == 0 and Unit(player):HasBuffs(A.TestofMightBuff.ID) == 0 then
                return A.FocusedAzeriteBeam:Show(icon)
            end 
            
            --reaping_flames,if=!debuff.colossus_smash.up&!buff.test_of_might.up
            if A.ReapingFlames:AutoHeartOfAzerothP(unitID) and Unit(unitID):HasDeBuffs(A.ColossusSmashDebuff.ID, true) == 0 and Unit(player):HasBuffs(A.TestofMightBuff.ID) == 0 then
                return A.ReapingFlames:Show(icon)
            end
            
            --concentrated_flame,if=!debuff.colossus_smash.up&!buff.test_of_might.up&dot.concentrated_flame_burn.remains=0
            if A.ConcentratedFlame:AutoHeartOfAzerothP(unitID) and (Unit(unitID):HasDeBuffs(A.ColossusSmashDebuff.ID, true) == 0 and Unit(player):HasBuffs(A.TestofMightBuff.ID) == 0
                and Unit(unitID):HasDeBuffs(A.ConcentratedFlameDebuff.ID) == 0) then
                return A.ConcentratedFlame:Show(icon)
            end
            
            --the_unbound_force,if=buff.reckless_force.up
            if A.TheUnboundForce:AutoHeartOfAzeroth(unitID) and Unit(player):HasBuffs(A.RecklessForceBuff.ID, true) > 0 then
                return A.TheUnboundForce:Show(icon)
            end
            
            --guardian_of_azeroth,if=cooldown.colossus_smash.remains<10
            if A.GuardianofAzeroth:AutoHeartOfAzerothP(unitID) and A.ColossusSmash:GetCooldown() < 10 then 
                return A.GuardianofAzeroth:Show(icon)
            end
            
            --memory_of_lucid_dreams,if=!talent.warbreaker.enabled&cooldown.colossus_smash.remains<gcd&(target.time_to_die>150|target.health.pct<20)
            if A.MemoryofLucidDreams:AutoHeartOfAzerothP(unitID) and (not A.Warbreaker:IsSpellLearned() and A.ColossusSmash:GetCooldown() < GetGCD() + GetCurrentGCD() and 
                (Unit(unitID):TimeToDie() > 150 or Unit(unitID):HealthPercent() < 20)) then
                return A.MemoryofLucidDreams:Show(icon)
            end
            
            --memory_of_lucid_dreams,if=talent.warbreaker.enabled&cooldown.warbreaker.remains<gcd&(target.time_to_die>150|target.health.pct<20)
            if A.MemoryofLucidDreams:AutoHeartOfAzerothP(unitID) and (A.Warbreaker:IsSpellLearned() and A.Warbreaker:GetCooldown() < GetGCD() + GetCurrentGCD() and 
                (Unit(unitID):TimeToDie() > 150 or Unit(unitID):HealthPercent() < 20)) then
                return A.MemoryofLucidDreams:Show(icon)
            end
            
            if A.Trinket1:IsReady(unitID) and A.Trinket1:GetItemCategory() ~= "DEFF" and A.Trinket1:AbsentImun(unitID, "DamageMagicImun") and not Temp.IsSlotTrinketBlocked[A.Trinket1.ID] and
            Unit(unitID):HasDeBuffs(A.ColossusSmashDebuff.ID, true) > 0 then  
                return A.Trinket1:Show(icon)    
            end 
            
            if A.Trinket2:IsReady(unitID) and A.Trinket2:GetItemCategory() ~= "DEFF" and A.Trinket2:AbsentImun(unitID, "DamageMagicImun") and not Temp.IsSlotTrinketBlocked[A.Trinket2.ID] and
            Unit(unitID):HasDeBuffs(A.ColossusSmashDebuff.ID, true) > 0 then 
                return A.Trinket2:Show(icon)
            end   
            
            local targetCoralDebuff = MultiUnits:GetByRangeAppliedDoTs(nil, 2, A.RazorCoralDebuff.ID)
            if A.AshvanesRazorCoral:IsReady(unitID, true) and (Unit(unitID):HasDeBuffs(A.RazorCoralDebuff.ID, true) == 0 and targetCoralDebuff == 0 or 
                Unit(unitID):HealthPercent() < 31 and  Unit(unitID):HasDeBuffs(A.RazorCoralDebuff.ID, true) > 0) then 
                return A.AshvanesRazorCoral:Show(icon)
            end 
        end
        
        if A.ColossusSmash:IsReady(unitID) and not A.Warbreaker:IsSpellLearned() and A.ColossusSmash:AbsentImun(unitID, Temp.AttackTypes) then
            return A.ColossusSmash:Show(icon)
        end
        
        if A.Warbreaker:IsReady(unitID, true) and A.Warbreaker:IsSpellLearned() and InMelee(unitID) and A.Warbreaker:AbsentImun(unitID, Temp.AttackTypes) then
            return A.Warbreaker:Show(icon)
        end
        
        if inAoE and GetByRange(2,8) and not EnemyTeam("HEALER"):IsBreakAble(8) and A.SweepingStrikes:IsReady(player) then
            return A.SweepingStrikes:Show(icon)
        end
        
        if A.Rend:IsReady(unitID) and Unit(unitID):HasDeBuffs(A.Rend.ID, true) <= GetGCD() + GetCurrentGCD() + GetPing() + (TMW.UPD_INTV or 0) + ACTION_CONST_CACHE_DEFAULT_TIMER and A.Rend:AbsentImun(unitID, Temp.AttackTypes) then
            return A.Rend:Show(icon)
        end
        
        if A.Overpower:IsReady(unitID) and Unit(player):HasBuffsStacks(A.Overpower.ID, true) <= 2 and A.Overpower:AbsentImun(unitID, Temp.AttackTypes) then
            return A.Overpower:Show(icon)
        end
        
        if A.SharpenBlade:IsReady(player) and A.MortalStrike:GetCooldown() == 0 and InMelee(unitID) then
            return A.SharpenBlade:Show(icon)
        end
        
        if A.MortalStrike:IsReady(unitID) and A.MortalStrike:AbsentImun(unitID, Temp.AttackTypes) then
            return A.MortalStrike:Show(icon)
        end
        
        if A.Slam:IsReady(unitID) and Unit(player):HasBuffs(A.CrushingAssaultBuff.ID) > 0 and A.Slam:AbsentImun(unitID, Temp.AttackTypes) then
            return A.Slam:Show(icon)
        end
        
        if A.Execute:IsReady(unitID) and A.Execute:AbsentImun(unitID, Temp.AttackTypes) then
            return A.Execute:Show(icon)
        end
        
        if A.Slam:IsReady(unitID) and rage >= 40 and A.Slam:AbsentImun(unitID, Temp.AttackTypes) then
            return A.Slam:Show(icon)
        end
        
        if A.WarBanner:IsReady(player) and (Unit(unitID):IsMovingOut() or Unit(player):HealthPercent() <= 70 and Unit(player):IsFocused()) and inCombat then
            return A.WarBanner:Show(icon)
        end
        
        if unitID ~= "mouseover" and AutoCharge and not InMelee(unitID) and Player:IsMovingTime() > 2 and not Player:IsMounted() and A.Charge:IsReady(unitID) and Unit(unitID):GetRange() >= AutoChargeRange then         
            return A.Charge:Show(icon)
        end
    end
    
    if A.IsInPvP and A.DefensiveStance:IsSpellLearned() and not inCombat and A.DefensiveStance:IsReady(player) and Unit(player):HasBuffs(A.DefensiveStance.ID) == 0 then
        return A.DefensiveStance:Show(icon)
    end
    
    -- Defensive
    --    local SelfDefensive = SelfDefensives()
    --  if SelfDefensive then 
    --    return SelfDefensive:Show(icon)
    --end     
    
    if IsUnitEnemy(target) then 
        unitID = target
        
        if not Unit(unitID):IsDead() and not A.IsInPvP and EnemyRotation(unitID) then 
            return true 
        end 
        
        if not Unit(unitID):IsDead() and A.IsInPvP and EnemyRotationPvP(unitID) then 
            return true 
        end 
    end 
    
end 

-- [4] AoE Rotation
A[4] = function(icon)
    return A[3](icon, true)
end 

-- [5] Trinket Rotation
-- No specialization trinket actions 
A[5] = nil 

local function ArenaRotation(icon, unitID)
    if A.IsInPvP and (A.Zone == "pvp" or A.Zone == "arena") and not Player:IsStealthed() and not Player:IsMounted() then
        -- Note: "arena1" is just identification of meta 6
        if unitID == "arena1" and (Unit(player):GetDMG() == 0 or not Unit(player):IsFocused("DAMAGER")) then                 
            -- PvP Pet Taunt        
            if A.Taunt:IsReady() and EnemyTeam():IsTauntPetAble(A.Taunt.ID) then 
                -- Freezing Trap 
                if FreezingTrapUsedByEnemy() then 
                    return A.Taunt:Show(icon)
                end 
                
                -- Casting BreakAble CC
                if EnemyTeam():IsCastingBreakAble(0.25) then 
                    return A.Taunt:Show(icon)
                end 
                
                -- Try avoid something totally random at opener (like sap / blind)
                if Unit(player):CombatTime() <= 5 and (Unit(player):CombatTime() > 0 or Unit(target):CombatTime() > 0 or MultiUnits:GetByRangeInCombat(40, 1) >= 1) then 
                    return A.Taunt:Show(icon) 
                end 
            end 
        end
        
        if A.DisarmIsReady(unitID) and not Unit(unitID):InLOS() then
            return A.Disarm:Show(icon)
        end
        
        if A.Rend:IsReady(unitID) and Unit(target):HealthPercent() > 40 and Unit(target):HasDeBuffs("Stuned") == 0 and Unit(unitID):HasDeBuffs(A.Rend.ID) <= GetGCD() + GetCurrentGCD() + GetPing() + (TMW.UPD_INTV or 0) + ACTION_CONST_CACHE_DEFAULT_TIMER and A.Rend:AbsentImun(unitID, Temp.AttackTypes) then
            return A.Rend:Show(icon)
        end    
        
        if A.IsInPvP and GetToggle(1, "AutoTarget") and IsUnitEnemy(target) and not A.AbsentImun(nil, target, Temp.AttackTypes) and MultiUnits:GetByRangeInCombat(12, 2) >= 2 then 
            return A:Show(icon, ACTION_CONST_AUTOTARGET)
        end
    end
end 

local function PartyRotation(unitID)  
    -- RallyingCry 
    local RallyingCry = GetToggle(2, "RallyingCryPvP")
    if    RallyingCry >= 0 and A.RallyingCry:IsReady(unitID) and 
    (
        (     -- Auto 
            RallyingCry >= 100 and 
            (
                -- HP lose per sec >= 20
                Unit(unitID):GetDMG() * 100 / Unit(unitID):HealthMax() >= 20 or 
                Unit(unitID):GetRealTimeDMG() >= Unit(unitID):HealthMax() * 0.20 or 
                -- TTD 
                Unit(unitID):TimeToDieX(25) < 5 or 
                (
                    A.IsInPvP and 
                    (
                        Unit(unitID):UseDeff() or 
                        (
                            Unit(unitID, 5):HasFlags() and 
                            Unit(unitID):GetRealTimeDMG() > 0 and 
                            Unit(unitID):IsFocused() 
                        )
                    )
                )
            ) and 
            Unit(unitID):HasBuffs(unitID, true) == 0
        ) or 
        (    -- Custom
            RallyingCry < 100 and 
            Unit(unitID):HealthPercent() <= RallyingCry
        )
    ) 
    then 
        return A.RallyingCry
    end  
    
    if A.WarBanner:IsReady(unitID) and Unit(unitID):CombatTime() > 0 and Unit(unitID):HealthPercent() <= 70 and Unit(unitID):IsFocused() then
        return A.WarBanner:Show(icon)
    end
    
end 

A[6] = function(icon)    
    return ArenaRotation(icon, "arena1")
end

A[7] = function(icon)   
    local Party = PartyRotation("party1") 
    if Party then 
        return Party:Show(icon)
    end 
    
    return ArenaRotation(icon, "arena2")
end

A[8] = function(icon)
    return ArenaRotation(icon, "arena3")
end

